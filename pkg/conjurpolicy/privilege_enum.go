// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package conjurpolicy

import (
	"errors"
	"fmt"
)

const (
	// PrivilegeRead is a Privilege of type Read.
	PrivilegeRead Privilege = iota
	// PrivilegeExecute is a Privilege of type Execute.
	PrivilegeExecute
	// PrivilegeUpdate is a Privilege of type Update.
	PrivilegeUpdate
	// PrivilegeCreate is a Privilege of type Create.
	PrivilegeCreate
)

var ErrInvalidPrivilege = errors.New("not a valid Privilege")

const _PrivilegeName = "readexecuteupdatecreate"

var _PrivilegeMap = map[Privilege]string{
	PrivilegeRead:    _PrivilegeName[0:4],
	PrivilegeExecute: _PrivilegeName[4:11],
	PrivilegeUpdate:  _PrivilegeName[11:17],
	PrivilegeCreate:  _PrivilegeName[17:23],
}

// String implements the Stringer interface.
func (x Privilege) String() string {
	if str, ok := _PrivilegeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Privilege(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Privilege) IsValid() bool {
	_, ok := _PrivilegeMap[x]
	return ok
}

var _PrivilegeValue = map[string]Privilege{
	_PrivilegeName[0:4]:   PrivilegeRead,
	_PrivilegeName[4:11]:  PrivilegeExecute,
	_PrivilegeName[11:17]: PrivilegeUpdate,
	_PrivilegeName[17:23]: PrivilegeCreate,
}

// ParsePrivilege attempts to convert a string to a Privilege.
func ParsePrivilege(name string) (Privilege, error) {
	if x, ok := _PrivilegeValue[name]; ok {
		return x, nil
	}
	return Privilege(0), fmt.Errorf("%s is %w", name, ErrInvalidPrivilege)
}

// MarshalText implements the text marshaller method.
func (x Privilege) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Privilege) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsePrivilege(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
