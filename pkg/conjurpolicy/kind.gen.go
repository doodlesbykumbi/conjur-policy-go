// Code generated by "enumer -type Kind -trimprefix Kind -transform lower -text -output kind.gen.go"; DO NOT EDIT.

package conjurpolicy

import (
	"fmt"
	"strings"
)

const _KindName = "policyvariableusergrouplayergranthostdeletepermitdeny"

var _KindIndex = [...]uint8{0, 6, 14, 18, 23, 28, 33, 37, 43, 49, 53}

const _KindLowerName = "policyvariableusergrouplayergranthostdeletepermitdeny"

func (i Kind) String() string {
	if i < 0 || i >= Kind(len(_KindIndex)-1) {
		return fmt.Sprintf("Kind(%d)", i)
	}
	return _KindName[_KindIndex[i]:_KindIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KindNoOp() {
	var x [1]struct{}
	_ = x[KindPolicy-(0)]
	_ = x[KindVariable-(1)]
	_ = x[KindUser-(2)]
	_ = x[KindGroup-(3)]
	_ = x[KindLayer-(4)]
	_ = x[KindGrant-(5)]
	_ = x[KindHost-(6)]
	_ = x[KindDelete-(7)]
	_ = x[KindPermit-(8)]
	_ = x[KindDeny-(9)]
}

var _KindValues = []Kind{KindPolicy, KindVariable, KindUser, KindGroup, KindLayer, KindGrant, KindHost, KindDelete, KindPermit, KindDeny}

var _KindNameToValueMap = map[string]Kind{
	_KindName[0:6]:        KindPolicy,
	_KindLowerName[0:6]:   KindPolicy,
	_KindName[6:14]:       KindVariable,
	_KindLowerName[6:14]:  KindVariable,
	_KindName[14:18]:      KindUser,
	_KindLowerName[14:18]: KindUser,
	_KindName[18:23]:      KindGroup,
	_KindLowerName[18:23]: KindGroup,
	_KindName[23:28]:      KindLayer,
	_KindLowerName[23:28]: KindLayer,
	_KindName[28:33]:      KindGrant,
	_KindLowerName[28:33]: KindGrant,
	_KindName[33:37]:      KindHost,
	_KindLowerName[33:37]: KindHost,
	_KindName[37:43]:      KindDelete,
	_KindLowerName[37:43]: KindDelete,
	_KindName[43:49]:      KindPermit,
	_KindLowerName[43:49]: KindPermit,
	_KindName[49:53]:      KindDeny,
	_KindLowerName[49:53]: KindDeny,
}

var _KindNames = []string{
	_KindName[0:6],
	_KindName[6:14],
	_KindName[14:18],
	_KindName[18:23],
	_KindName[23:28],
	_KindName[28:33],
	_KindName[33:37],
	_KindName[37:43],
	_KindName[43:49],
	_KindName[49:53],
}

// KindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KindString(s string) (Kind, error) {
	if val, ok := _KindNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KindNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Kind values", s)
}

// KindValues returns all values of the enum
func KindValues() []Kind {
	return _KindValues
}

// KindStrings returns a slice of all String values of the enum
func KindStrings() []string {
	strs := make([]string, len(_KindNames))
	copy(strs, _KindNames)
	return strs
}

// IsAKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Kind) IsAKind() bool {
	for _, v := range _KindValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Kind
func (i Kind) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Kind
func (i *Kind) UnmarshalText(text []byte) error {
	var err error
	*i, err = KindString(string(text))
	return err
}
