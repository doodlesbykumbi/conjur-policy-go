package main

import (
	. "github.com/dave/jennifer/jen"
	"github.com/doodlesbykumbi/conjur-policy-go/pkg/conjurpolicy"
	"log"
	"os"
	"path/filepath"
	"reflect"
	"strings"
)

func main() {
	structType := conjurpolicy.Resources2{}
	generate(structType)
}

func generate(inputType interface{}) {
	f := NewFile(os.Getenv("GOPACKAGE"))

	f.PackageComment("Code generated by typegenerator, DO NOT EDIT.")
	var cases Statement
	structType := reflect.TypeOf(inputType)
	for i := 0; i < structType.NumField(); i++ {
		field := structType.Field(i)
		v := strings.ToLower(field.Name)[:1]

		// MarshalYAML function generation
		f.Func().Params(
			Id(v).Id(field.Name),
		).Id("MarshalYAML").Params().Params(
			Interface(),
			Error(),
		).Block(
			Return(Id("MarshalYAMLWithTag").Call(Id(v), Id("Kind"+field.Name))),
		).Empty()

		// Prepare cases for UnmarshalYAML (decoding is skipped for Layer type)
		if field.Name == conjurpolicy.KindLayer.String() {
			cases = append(cases, Case(Id("Kind"+field.Name+".Tag()")).Block(
				Var().Id(strings.ToLower(field.Name)).Id(field.Name),
				Id("statement").Op("=").Id(strings.ToLower(field.Name)),
			))
		} else {
			cases = append(cases, Case(Id("Kind"+field.Name+".Tag()")).Block(
				Var().Id(strings.ToLower(field.Name)).Id(field.Name),
				If(Id("len").Call(Id("node.Value")).Op(">").Id("0").Op("||").Id(
					"len").Call(Id("node.Content")).Op(">").Id("0").Block(
					If(Id("err").Op(":=").Id("node.Decode").Call(Id("&"+strings.ToLower(field.Name))), Id("err").Op("!=").Nil().Block(
						Return(Id("err")),
					)),
				)),
				Id("statement").Op("=").Id(strings.ToLower(field.Name)),
			))
		}
	}

	// UnmarshalYAML function generation
	f.Func().Params(
		Id("s *PolicyStatements"),
	).Id("UnmarshalYAML").Params(
		Id("value").Op("*").Qual("gopkg.in/yaml.v3", "Node"),
	).Params(Error()).Block(
		Var().Id("statements").Id("[]Resource"),
		For(
			Id("_, ").Id("node").Op(":=").Range().Id("value.Content").Block(
				Var().Id("statement").Id("Resource"),
				Switch(Id("node.Tag")).Block(cases...),
				Id("statements").Op("=").Append(Id("statements"), Id("statement")),
			),
		),
		Id("*s").Op("=").Id("statements"),
		Return(Nil()),
	)

	goFile := os.Getenv("GOFILE")
	ext := filepath.Ext(goFile)
	baseFilename := goFile[0 : len(goFile)-len(ext)]
	targetFilename := baseFilename + "_gen.go"
	if err := f.Save(targetFilename); err != nil {
		log.Fatal("Error while generating Go file: ", err)
	}
}
