// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package conjurpolicy

import (
	"errors"
	"fmt"

	yamlv3 "gopkg.in/yaml.v3"
)

const (
	// KindPolicy is a Kind of type Policy.
	KindPolicy Kind = iota
	// KindVariable is a Kind of type Variable.
	KindVariable
	// KindUser is a Kind of type User.
	KindUser
	// KindGroup is a Kind of type Group.
	KindGroup
	// KindLayer is a Kind of type Layer.
	KindLayer
	// KindGrant is a Kind of type Grant.
	KindGrant
	// KindHost is a Kind of type Host.
	KindHost
	// KindDelete is a Kind of type Delete.
	KindDelete
	// KindPermit is a Kind of type Permit.
	KindPermit
	// KindDeny is a Kind of type Deny.
	KindDeny
)

var ErrInvalidKind = errors.New("not a valid Kind")

const _KindName = "policyvariableusergrouplayergranthostdeletepermitdeny"

var _KindMap = map[Kind]string{
	KindPolicy:   _KindName[0:6],
	KindVariable: _KindName[6:14],
	KindUser:     _KindName[14:18],
	KindGroup:    _KindName[18:23],
	KindLayer:    _KindName[23:28],
	KindGrant:    _KindName[28:33],
	KindHost:     _KindName[33:37],
	KindDelete:   _KindName[37:43],
	KindPermit:   _KindName[43:49],
	KindDeny:     _KindName[49:53],
}

// String implements the Stringer interface.
func (x Kind) String() string {
	if str, ok := _KindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Kind(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Kind) IsValid() bool {
	_, ok := _KindMap[x]
	return ok
}

var _KindValue = map[string]Kind{
	_KindName[0:6]:   KindPolicy,
	_KindName[6:14]:  KindVariable,
	_KindName[14:18]: KindUser,
	_KindName[18:23]: KindGroup,
	_KindName[23:28]: KindLayer,
	_KindName[28:33]: KindGrant,
	_KindName[33:37]: KindHost,
	_KindName[37:43]: KindDelete,
	_KindName[43:49]: KindPermit,
	_KindName[49:53]: KindDeny,
}

// ParseKind attempts to convert a string to a Kind.
func ParseKind(name string) (Kind, error) {
	if x, ok := _KindValue[name]; ok {
		return x, nil
	}
	return Kind(0), fmt.Errorf("%s is %w", name, ErrInvalidKind)
}

func (p Policy) MarshalYAML() (interface{}, error) {
	type aliasPolicy Policy
	data := aliasPolicy(p)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindPolicy.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (v Variable) MarshalYAML() (interface{}, error) {
	type aliasVariable Variable
	data := aliasVariable(v)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindVariable.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (u User) MarshalYAML() (interface{}, error) {
	type aliasUser User
	data := aliasUser(u)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindUser.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (g Group) MarshalYAML() (interface{}, error) {
	type aliasGroup Group
	data := aliasGroup(g)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindGroup.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (l Layer) MarshalYAML() (interface{}, error) {
	type aliasLayer Layer
	data := aliasLayer(l)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindLayer.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (g Grant) MarshalYAML() (interface{}, error) {
	type aliasGrant Grant
	data := aliasGrant(g)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindGrant.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (h Host) MarshalYAML() (interface{}, error) {
	type aliasHost Host
	data := aliasHost(h)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindHost.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (d Delete) MarshalYAML() (interface{}, error) {
	type aliasDelete Delete
	data := aliasDelete(d)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindDelete.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (p Permit) MarshalYAML() (interface{}, error) {
	type aliasPermit Permit
	data := aliasPermit(p)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindPermit.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (d Deny) MarshalYAML() (interface{}, error) {
	type aliasDeny Deny
	data := aliasDeny(d)
	node := &yamlv3.Node{}
	node.Kind = yamlv3.MappingNode
	if err := node.Encode(data); err != nil {
		return nil, err
	}
	// Avoid emitting strings like `- !variable {}` and instead emit `- !variable` by setting Kind to ScalarNode
	// when the resource struct is empty!
	if len(node.Content) == 0 {
		node.Kind = yamlv3.ScalarNode
	}
	node.Tag = KindDeny.Tag()
	node.Style = yamlv3.TaggedStyle
	return node, nil
}

func (s *PolicyStatements) UnmarshalYAML(value *yamlv3.Node) error {
	var statements []Resource
	for _, node := range value.Content {
		var statement Resource
		switch node.Tag {

		case KindPolicy.Tag():
			var p Policy
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&p); err != nil {
					return err
				}
			}
			statement = p

		case KindVariable.Tag():
			var v Variable
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&v); err != nil {
					return err
				}
			}
			statement = v

		case KindUser.Tag():
			var u User
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&u); err != nil {
					return err
				}
			}
			statement = u

		case KindGroup.Tag():
			var g Group
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&g); err != nil {
					return err
				}
			}
			statement = g

		case KindLayer.Tag():
			var l Layer
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&l); err != nil {
					return err
				}
			}
			statement = l

		case KindGrant.Tag():
			var g Grant
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&g); err != nil {
					return err
				}
			}
			statement = g

		case KindHost.Tag():
			var h Host
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&h); err != nil {
					return err
				}
			}
			statement = h

		case KindDelete.Tag():
			var d Delete
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&d); err != nil {
					return err
				}
			}
			statement = d

		case KindPermit.Tag():
			var p Permit
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&p); err != nil {
					return err
				}
			}
			statement = p

		case KindDeny.Tag():
			var d Deny
			if len(node.Value) > 0 || len(node.Content) > 0 {
				if err := node.Decode(&d); err != nil {
					return err
				}
			}
			statement = d
		}
		statements = append(statements, statement)
	}
	*s = statements
	return nil
}
