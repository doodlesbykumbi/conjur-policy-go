// Code generated by "enumer -type Privilege -trimprefix Privilege -transform lower -text -output privilege.gen.go"; DO NOT EDIT.

package conjurpolicy

import (
	"fmt"
	"strings"
)

const _PrivilegeName = "readexecuteupdatecreate"

var _PrivilegeIndex = [...]uint8{0, 4, 11, 17, 23}

const _PrivilegeLowerName = "readexecuteupdatecreate"

func (i Privilege) String() string {
	if i < 0 || i >= Privilege(len(_PrivilegeIndex)-1) {
		return fmt.Sprintf("Privilege(%d)", i)
	}
	return _PrivilegeName[_PrivilegeIndex[i]:_PrivilegeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PrivilegeNoOp() {
	var x [1]struct{}
	_ = x[PrivilegeRead-(0)]
	_ = x[PrivilegeExecute-(1)]
	_ = x[PrivilegeUpdate-(2)]
	_ = x[PrivilegeCreate-(3)]
}

var _PrivilegeValues = []Privilege{PrivilegeRead, PrivilegeExecute, PrivilegeUpdate, PrivilegeCreate}

var _PrivilegeNameToValueMap = map[string]Privilege{
	_PrivilegeName[0:4]:        PrivilegeRead,
	_PrivilegeLowerName[0:4]:   PrivilegeRead,
	_PrivilegeName[4:11]:       PrivilegeExecute,
	_PrivilegeLowerName[4:11]:  PrivilegeExecute,
	_PrivilegeName[11:17]:      PrivilegeUpdate,
	_PrivilegeLowerName[11:17]: PrivilegeUpdate,
	_PrivilegeName[17:23]:      PrivilegeCreate,
	_PrivilegeLowerName[17:23]: PrivilegeCreate,
}

var _PrivilegeNames = []string{
	_PrivilegeName[0:4],
	_PrivilegeName[4:11],
	_PrivilegeName[11:17],
	_PrivilegeName[17:23],
}

// PrivilegeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PrivilegeString(s string) (Privilege, error) {
	if val, ok := _PrivilegeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PrivilegeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Privilege values", s)
}

// PrivilegeValues returns all values of the enum
func PrivilegeValues() []Privilege {
	return _PrivilegeValues
}

// PrivilegeStrings returns a slice of all String values of the enum
func PrivilegeStrings() []string {
	strs := make([]string, len(_PrivilegeNames))
	copy(strs, _PrivilegeNames)
	return strs
}

// IsAPrivilege returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Privilege) IsAPrivilege() bool {
	for _, v := range _PrivilegeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Privilege
func (i Privilege) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Privilege
func (i *Privilege) UnmarshalText(text []byte) error {
	var err error
	*i, err = PrivilegeString(string(text))
	return err
}
